/*
Desafio Node - 1
ðŸš€ Sobre o desafio
Crie uma aplicaÃ§Ã£o que farÃ¡ o cadastro dos pedidos de uma hamburgueria, e vocÃª deve utilizar Node e Express.

Rotas
POST /order: A rota deve receber o pedido do cliente, o nome do cliente e o valor do pedido, essas informaÃ§Ãµes devem ser passadas dentro do corpo(body) da requisiÃ§Ã£o, e com essas informaÃ§Ãµes vocÃª deve registrar o novo pedido dentro de um array no seguinte formato: { id: "ac3ebf68-e0ad-4c1d-9822-ff1b849589a8", order: "X- Salada, 2 batatas grandes, 1 coca-cola", clientName:"JosÃ©", price: 44.50, status:"Em preparaÃ§Ã£o" }. NÃ£o se esqueÃ§a que o ID deve ser gerado por vocÃª, dentro do cÃ³digo utilizando UUID V4, assim que o pedido Ã© criado, vocÃª deve sempre colocar o status como "Em preparaÃ§Ã£o".

GET /order: Rota que lista todos os pedidos jÃ¡ feitos.

PUT /order/:id: Essa rota deve alterar um pedido jÃ¡ feito. Pode alterar,um ou todos os dados do pedido.O id do pedido deve ser enviado nos parÃ¢metros da rota.

DELETE /order/:id: Essa rota deve deletar um pedido jÃ¡ feito com o id enviado nos parÃ¢metros da rota.

GET /order/:id: Essa rota recebe o id nos parÃ¢metros e deve retornar um pedido especÃ­fico.

PATCH /order/:id: Essa rota recebe o id nos parÃ¢metros e assim que ela for chamada, deve alterar o status do pedido recebido pelo id para "Pronto".

Exemplo
Se eu chamar a rota POST /order repassando { order: "X- Salada, 2 batatas grandes, 1 coca-cola", clienteName:"JosÃ©", price: 44.50 }, o array deve ficar assim:

[
  {
    id: "ac3ebf68-e0ad-4c1d-9822-ff1b849589a8",
    order: "X- Salada, 2 batatas grandes, 1 coca-cola",
    clienteName:"JosÃ©", 
    price: 44.50,
    status:"Em preparaÃ§Ã£o"
  }
];
Se eu chamar a rota PATCH /order/ac3ebf68-e0ad-4c1d-9822-ff1b849589a8, o array deve ficar assim:

[
  {
    id: "ac3ebf68-e0ad-4c1d-9822-ff1b849589a8",
    order: "X- Salada, 2 batatas grandes, 1 coca-cola",
    clienteName:"JosÃ©", 
    price: 44.50,
    status:"Pronto"
  }
];
Middlewares
Crie um middleware que serÃ¡ utilizado em todas rotas que recebem o parÃ¢metro ID, entÃ£o ele deve verificar se o ID passado existe. Se nÃ£o existir retorne um erro, caso contrÃ¡rio permita a requisiÃ§Ã£o continuar normalmente;

Crie um middleware que Ã© chamado em todas requisiÃ§Ãµes que tenha um console.log que mostra o mÃ©todo da requisiÃ§ao(GET,POST,PUT,DELETE, etc) e tambÃ©m a url da requisiÃ§Ã£o.

Exemplo
[GET] - /order

ðŸ“… Entrega
ApÃ³s finalizar o desafio, suba o projeto para o seu github e compartilhe no Club, para todos verem que vocÃª conseguiu.

Feito com â™¥ by Dev Club - Rodolfo Mori 
 */


const express = require('express');
const uuid = require('uuid');

const port = 3000;
const app = express();

const orderHamburguer = [];

// Adicione o middleware express.json() aqui
app.use(express.json());

app.get('/order', (request, response) => {
  return response.json(orderHamburguer);
});

app.post('/order', (request, response) => {
  const { order, clienteName, price } = request.body;

  const newOrder = { id: uuid.v4(), order, clienteName, price, status: 'Em preraraÃ§Ã£o' };

  orderHamburguer.push(newOrder);

  return response.status(201).json(newOrder);
});

app.put('/order/:id', (request, response) => {
  const { id } = request.params;
  const { order, clienteName, price } = request.body;

  const updateOrder = { id, order, clienteName, price }

  const ordersIndex = orderHamburguer.findIndex(order => order.id === id);

if (!ordersIndex) {
  return response.status(404).json({ error: "Pedido nÃ£o encontrado" });
}
 

  orderHamburguer[ordersIndex] = updateOrder;

  return response.json(updateOrder)
});

app.delete('/order', (request, response) => {
  const {id} =  request.params;
  const ordersIndex = orderHamburguer.filter(order => order.id !== id );
   
  if(!id){ 
    return response.status(400 ).json({error:"NÃ£o foi possÃ­vel realizar a exclusÃ£o."})
  }

  orderHamburguer.splice(ordersIndex, 1);

  return response.status(204).json();
});
 

app.listen(port, () => {
  console.log(`Server started on port ${port}`);
});


